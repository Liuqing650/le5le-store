{
  "version": 3,
  "file": "le5le-store.umd.js",
  "sources": [
    "~/le5le-store/le5le-store.ts",
    "~/le5le-store/src/lib.module.ts",
    "~/le5le-store/src/store/store.service.ts",
    "~/le5le-store/src/cookie/cookie.service.ts"
  ],
  "sourcesContent": [
    "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n",
    "import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StoreService } from './store/store.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [StoreService]\n})\nexport class Le5leStoreModule {\n  constructor( @Optional() @SkipSelf() parentModule: Le5leStoreModule) {\n    if (parentModule) {\n      throw new Error(\n        'Le5leStoreModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: Le5leStoreModule,\n      providers: []\n    };\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class StoreService {\n  private memStore: any = {};\n  private memStore$: any = {};\n\n  private find(key: string): any {\n    if (key === '') return null;\n\n    let data: any;\n    let keys = [];\n    if (key === '.') data = this.memStore;\n    else {\n      keys = key.split('.');\n      data = this.memStore[keys[0]];\n    }\n    if (!data) return null;\n\n    // 遍历查找子属性data\n    if (keys.length > 1) {\n      keys.splice(0, 1);\n      for (let k of keys) {\n        data = data[k];\n        if (!data) return null;\n      }\n    }\n\n    return data;\n  }\n\n  private find$(key: string, autoAdd?: boolean): Subject<any> {\n    if (key === '') return null;\n\n    let data: Subject<any> = this.memStore$[key];\n    if (!data) {\n      if (!autoAdd) return null;\n      this.memStore$[key] = new Subject<any>();\n      data = this.memStore$[key];\n    }\n\n    return data;\n  }\n\n  // key: 如果含.表示解析成对象进行条件搜索。注意：但第一个属性存在时，但是where的条件（非type）不匹配时，返回失败。\n  //      如果key = '.'; 表示根存储对象\n  // where: {\n  //   'user.name': 'Alsmile', // 如果含.表示解析成对象进行条件搜索\n  // }\n  public get(key: string, where?: any): any {\n    let data: any = this.find(key);\n\n    // where条件过滤\n    if (where) {\n      for (let whereKey in where) {\n        if (this.find(whereKey) != where[whereKey]) return null;\n      }\n    }\n\n    return data;\n  }\n\n  // 得到一个可观察对象\n  // key: 如果含.表示解析成对象进行条件搜索。\n  public get$(key: string): any {\n    return this.find$(key, true);\n  }\n\n  // key: 如果含.表示解析成对象进行条件搜索。注意：但第一个属性存在时，但是where的条件不匹配时，返回失败。\n  // value: 设置key=value; 如果 value为空，表示删除\n  // where: {\n  //   'user.name': 'Alsmile', // 如果含.表示解析成对象进行条件搜索\n  // }\n  public set(strKey: string, value: any, where?: any): boolean {\n    if (strKey === '' || strKey === '.') return false;\n\n    let keys = strKey.split('.');\n    let rootKey = keys[0];\n    let observableKeys = [rootKey];\n\n    let data: any = this.memStore[rootKey];\n    if (!data) {\n      this.memStore[rootKey] = {};\n      data = this.memStore[rootKey];\n    }\n\n    // 遍历查找子属性data\n    let parentData: any = this.memStore;\n    let readKey = rootKey;\n    let subData: any = data;\n    if (keys.length > 1) {\n      keys.splice(0, 1);\n      for (let k of keys) {\n        if (!subData[k]) subData[k] = {};\n\n        // 添加到observable通知数组，通知订阅数据改变\n        observableKeys.push(observableKeys[observableKeys.length - 1] + '.' + k);\n\n        parentData = subData;\n        readKey = k;\n        subData = subData[k];\n      }\n    }\n\n    // where条件遍历\n    if (where) {\n      for (let whereKeys in where) {\n        let whereData = this.memStore;\n        // 查找where中的子属性\n        let whereKey = whereKeys.split('.');\n        for (let k of whereKey) {\n          whereData = whereData[k];\n          if (!whereData) return false;\n        }\n        if (whereData != where[whereKeys]) return false;\n      }\n    }\n\n    if (value) parentData[readKey] = value;\n    else delete parentData[readKey];\n\n    for (let k of observableKeys) {\n      let observable: Subject<any> = this.find$(k);\n      if (observable) {\n        observable.next(value);\n      }\n    }\n\n    return true;\n  }\n\n  // 通过一个观察对象去设置数据\n  // key: 如果含.表示解析成对象进行条件搜索。\n  public setByObservable(key: string, observable: any) {\n    (<Observable<any>>observable).subscribe(\n      ret => {\n        this.set(key, ret);\n      }\n    );\n  }\n}\n",
    "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CookieService {\n\n  static get(name: string): string {\n    let arr: RegExpMatchArray;\n    let reg = new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\");\n    if (arr = document.cookie.match(reg)) return decodeURIComponent(arr[2]);\n    else return '';\n  }\n\n  // options: {\n  //   expires?:number,\n  //   path?:string,\n  //   domain?:string\n  // }\n  static set(name: string, value: string, options?: any) {\n    let myWindow: any = window;\n    let cookieStr = myWindow.escape(name) + '=' + myWindow.escape(value) + ';';\n\n    if (!options) options = {};\n    if (options.expires) {\n      let dtExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n      cookieStr += 'expires=' + dtExpires.toUTCString() + ';';\n    }\n    if (options.path) {\n      cookieStr += 'path=' + options.path + ';';\n    }\n    if (options.domain) {\n      cookieStr += 'domain=' + options.domain + ';';\n    }\n\n    document.cookie = cookieStr;\n  }\n\n  // options: {\n  //   path?:string,\n  //   domain?:string\n  // }\n  static delete(name: string, options?: any) {\n    if (CookieService.get(name)) {\n      if (!options) options = {};\n      options.expires = -1;\n      CookieService.set(name, '', options);\n    }\n  }\n}\n"
  ],
  "names": [
    "Le5leStoreModule",
    "this",
    "StoreService",
    "Injectable",
    "Subject$1",
    "CookieService"
  ],
  "mappings": "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"
}
